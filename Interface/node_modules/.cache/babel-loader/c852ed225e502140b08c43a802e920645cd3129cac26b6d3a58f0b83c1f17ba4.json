{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chatbox\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"messages\"\n};\nconst _hoisted_3 = {\n  key: 1,\n  class: \"no-contact-selected\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$props.currentContact ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" Display messages for the current contact \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredMessages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id\n    }, _toDisplayString(message.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \"Select a contact to start chatting\")), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.newMessage]])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","$props","currentContact","_hoisted_2","_createCommentVNode","_Fragment","_renderList","$options","filteredMessages","message","key","id","text","_hoisted_3","_createElementVNode","type","$data","newMessage","$event","onKeyup","_cache","_withKeys","args","sendMessage"],"sources":["C:\\Users\\13717\\community-marketplace\\Interface\\src\\components\\ChatBox.vue"],"sourcesContent":["<template>\r\n  <div class=\"chatbox\">\r\n    <div v-if=\"currentContact\" class=\"messages\">\r\n      <!-- Display messages for the current contact -->\r\n      <div v-for=\"message in filteredMessages\" :key=\"message.id\">\r\n        {{ message.text }}\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"no-contact-selected\">Select a contact to start chatting</div>\r\n    <input type=\"text\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    currentContact: {\r\n      type: Object,\r\n      default: () => null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      newMessage: '',\r\n      messages: [] // This should ideally come from a store or API\r\n    };\r\n  },\r\n  computed: {\r\n    filteredMessages() {\r\n      // Filter messages based on the selected contact\r\n      return this.messages.filter(msg => msg.contactId === this.currentContact.id);\r\n    }\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      // Logic to send message\r\n      // Add the new message to the messages array, etc.\r\n      this.newMessage = '';\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAS;;;EACSA,KAAK,EAAC;;;;EAMrBA,KAAK,EAAC;;;uBAPpBC,mBAAA,CASM,OATNC,UASM,GAROC,MAAA,CAAAC,cAAc,I,cAAzBH,mBAAA,CAKM,OALNI,UAKM,GAJJC,mBAAA,8CAAiD,G,kBACjDL,mBAAA,CAEMM,SAAA,QAAAC,WAAA,CAFiBC,QAAA,CAAAC,gBAAgB,EAA3BC,OAAO;yBAAnBV,mBAAA,CAEM;MAFoCW,GAAG,EAAED,OAAO,CAACE;wBAClDF,OAAO,CAACG,IAAI;qDAGnBb,mBAAA,CAAgF,OAAhFc,UAAgF,EAAxC,oCAAkC,I,gBAC1EC,mBAAA,CAAqE;IAA9DC,IAAI,EAAC,MAAM;+DAAUC,KAAA,CAAAC,UAAU,GAAAC,MAAA;IAAGC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,SAAA,KAAAC,IAAA,KAAQf,QAAA,CAAAgB,WAAA,IAAAhB,QAAA,CAAAgB,WAAA,IAAAD,IAAA,CAAW;iEAArCN,KAAA,CAAAC,UAAU,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}