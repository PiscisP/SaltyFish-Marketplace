{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-05a6aa6a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"messages-view\"\n};\nconst _hoisted_2 = {\n  class: \"message-list\"\n};\nconst _hoisted_3 = {\n  class: \"message-bubble\"\n};\nconst _hoisted_4 = {\n  class: \"message-text\"\n};\nconst _hoisted_5 = {\n  class: \"message-time\"\n};\nconst _hoisted_6 = {\n  class: \"message-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Message list \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"message\", {\n        'sender': message.isSender,\n        'receiver': !message.isSender\n      }]),\n      key: message.id\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString(message.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, _toDisplayString(message.time), 1 /* TEXT */)])], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Message input area \"), _createElementVNode(\"div\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    placeholder: \"Type a message...\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.newMessage]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"Send\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","messages","message","_normalizeClass","isSender","key","id","_hoisted_3","_hoisted_4","_toDisplayString","text","_hoisted_5","time","_hoisted_6","type","newMessage","$event","placeholder","onKeyup","_cache","_withKeys","args","$options","sendMessage","onClick"],"sources":["C:\\Users\\13717\\community-marketplace\\Interface\\src\\views\\MessagesView.vue"],"sourcesContent":["<template>\r\n  <div class=\"messages-view\">\r\n    <!-- Message list -->\r\n    <div class=\"message-list\">\r\n      <div class=\"message\" v-for=\"message in messages\" :key=\"message.id\" :class=\"{ 'sender': message.isSender, 'receiver': !message.isSender }\">\r\n        <div class=\"message-bubble\">\r\n          <div class=\"message-text\">{{ message.text }}</div>\r\n          <div class=\"message-time\">{{ message.time }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Message input area -->\r\n    <div class=\"message-input\">\r\n      <input type=\"text\" v-model=\"newMessage\" placeholder=\"Type a message...\" @keyup.enter=\"sendMessage\" />\r\n      <button @click=\"sendMessage\">Send</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'MessagesView',\r\n  data() {\r\n    return {\r\n      newMessage: '',\r\n      messages: [], // Start with an empty array\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      if (this.newMessage.trim() !== '') {\r\n        // Add new message to messages array\r\n        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n        this.messages.push({\r\n          id: this.messages.length + 1,\r\n          text: this.newMessage,\r\n          time: currentTime,\r\n          isSender: true, // Assuming the user is always the sender\r\n        });\r\n        this.newMessage = ''; // Reset input field\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.messages-view {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh; /* Full viewport height */\r\n  background-color: #f9f9f9; /* Background color */\r\n}\r\n\r\n.message-list {\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  width: 100%; /* Ensure the message takes full width of the container */\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.message.sender .message-bubble {\r\n  margin-left: auto;\r\n  background-color: #333; /* Sender bubble color */\r\n  align-self: flex-end;\r\n}\r\n\r\n.message.receiver .message-bubble {\r\n  background-color: #ccc; /* Receiver bubble color */\r\n  align-self: flex-start;\r\n}\r\n\r\n.message-bubble {\r\n  width: auto; /* Allow bubble to grow with content */\r\n  min-width: 10%; /* Minimum width */\r\n  max-width: 80%; /* Maximum width */\r\n  padding: 10px;\r\n  border-radius: 15px;\r\n  color: white; /* Text color */\r\n  word-wrap: break-word; /* Ensure long words do not overflow */\r\n}\r\n\r\n.message-text {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.75rem;\r\n  text-align: right;\r\n  color: #ddd; /* Time text color */\r\n}\r\n\r\n.message-input {\r\n  display: flex;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  border-top: 1px solid #ccc;\r\n}\r\n\r\n.message-input input {\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 15px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.message-input button {\r\n  padding: 10px 15px;\r\n  background-color: #333; /* Button background color */\r\n  color: white; /* Button text color */\r\n  border: none;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n}\r\n\r\n.message-input button:hover {\r\n  background-color: #444; /* Button hover color */\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAc;;EAEhBA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAc;;EAM1BA,KAAK,EAAC;AAAe;;uBAZ5BC,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJC,mBAAA,kBAAqB,EACrBC,mBAAA,CAOM,OAPNC,UAOM,I,kBANJJ,mBAAA,CAKMK,SAAA,QAAAC,WAAA,CALiCC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnCT,mBAAA,CAKM;MALDD,KAAK,EAAAW,eAAA,EAAC,SAAS;QAAA,UAAmED,OAAO,CAACE,QAAQ;QAAA,aAAeF,OAAO,CAACE;MAAQ;MAApFC,GAAG,EAAEH,OAAO,CAACI;QAC7DV,mBAAA,CAGM,OAHNW,UAGM,GAFJX,mBAAA,CAAkD,OAAlDY,UAAkD,EAAAC,gBAAA,CAArBP,OAAO,CAACQ,IAAI,kBACzCd,mBAAA,CAAkD,OAAlDe,UAAkD,EAAAF,gBAAA,CAArBP,OAAO,CAACU,IAAI,iB;oCAK/CjB,mBAAA,wBAA2B,EAC3BC,mBAAA,CAGM,OAHNiB,UAGM,G,gBAFJjB,mBAAA,CAAqG;IAA9FkB,IAAI,EAAC,MAAM;+DAAUd,KAAA,CAAAe,UAAU,GAAAC,MAAA;IAAEC,WAAW,EAAC,mBAAmB;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,SAAA,KAAAC,IAAA,KAAQC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;iEAArErB,KAAA,CAAAe,UAAU,E,GACtCnB,mBAAA,CAA0C;IAAjC4B,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}