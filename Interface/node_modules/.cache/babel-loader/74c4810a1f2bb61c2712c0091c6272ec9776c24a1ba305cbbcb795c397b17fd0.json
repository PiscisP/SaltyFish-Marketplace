{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chatbox\"\n};\nconst _hoisted_2 = {\n  class: \"messages\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.id\n    }, _toDisplayString(message.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newMessage = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.newMessage]])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","messages","message","key","id","text","type","newMessage","$event","onKeyup","_cache","_withKeys","args","$options","sendMessage"],"sources":["C:\\Users\\13717\\community-marketplace\\Interface\\src\\components\\ChatBox.vue"],"sourcesContent":["<template>\r\n  <div class=\"chatbox\">\r\n    <div class=\"messages\">\r\n      <div v-for=\"message in messages\" :key=\"message.id\">\r\n        {{ message.text }}\r\n      </div>\r\n    </div>\r\n    <input type=\"text\" v-model=\"newMessage\" @keyup.enter=\"sendMessage\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      messages: [], // Populate with chat messages\r\n      newMessage: ''\r\n    };\r\n  },\r\n  methods: {\r\n    sendMessage() {\r\n      // Logic to send message\r\n      this.newMessage = '';\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAU;;uBADvBC,mBAAA,CAOM,OAPNC,UAOM,GANJC,mBAAA,CAIM,OAJNC,UAIM,I,kBAHJH,mBAAA,CAEMI,SAAA,QAAAC,WAAA,CAFiBC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAnBR,mBAAA,CAEM;MAF4BS,GAAG,EAAED,OAAO,CAACE;wBAC1CF,OAAO,CAACG,IAAI;oDAGnBT,mBAAA,CAAqE;IAA9DU,IAAI,EAAC,MAAM;+DAAUN,KAAA,CAAAO,UAAU,GAAAC,MAAA;IAAGC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,SAAA,KAAAC,IAAA,KAAQC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;iEAArCZ,KAAA,CAAAO,UAAU,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}