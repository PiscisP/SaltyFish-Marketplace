{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'LoginView',\n  data() {\n    return {\n      username: '',\n      password: ''\n    };\n  },\n  methods: {\n    login() {\n      console.log('Login:', this.username, this.password);\n      // Mock login validation\n      if (this.username && this.password) {\n        // Redirect to the main page\n        this.$router.push({\n          name: 'MainPage'\n        });\n      }\n    }\n  }\n  /*\r\n    methods: {\r\n      async login() {\r\n        try {\r\n          console.log('Login:', this.username, this.password);\r\n          \r\n          // This is where you would implement the actual login logic.\r\n          // For demonstration purposes, we'll just simulate an API call with a timeout.\r\n          const response = await new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              // This is where you would resolve with an actual response from an API.\r\n              resolve({ success: true });\r\n            }, 1000);\r\n          });\r\n  \r\n          if (response.success) {\r\n            // Redirect to the main page\r\n            this.$router.push({ name: 'MainPage' });\r\n          } else {\r\n            // Handle login failure (e.g., wrong credentials)\r\n            console.error('Login failed: Invalid credentials');\r\n            // Here you should set an error message in your data to be displayed to the user.\r\n          }\r\n        } catch (error) {\r\n          // Handle errors (e.g., network error, server error)\r\n          console.error('Login error:', error);\r\n          // Set an error message in your data to be displayed to the user.\r\n        }\r\n      }\r\n    }\r\n    */\n};","map":{"version":3,"names":["name","data","username","password","methods","login","console","log","$router","push"],"sources":["C:\\Users\\13717\\community-marketplace\\Interface\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Login</h2>\r\n    <form @submit.prevent=\"login\">\r\n      <input type=\"text\" placeholder=\"Email/Username\" v-model=\"username\" required />\r\n      <input type=\"password\" placeholder=\"Password\" v-model=\"password\" required />\r\n      <button type=\"submit\">Login</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'LoginView',\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: ''\r\n    }\r\n  },\r\n  methods: {\r\n    login() {\r\n      console.log('Login:', this.username, this.password);\r\n      // Mock login validation\r\n      if (this.username && this.password) {\r\n        // Redirect to the main page\r\n        this.$router.push({ name: 'MainPage' });\r\n      }\r\n    }\r\n  }\r\n/*\r\n  methods: {\r\n    async login() {\r\n      try {\r\n        console.log('Login:', this.username, this.password);\r\n        \r\n        // This is where you would implement the actual login logic.\r\n        // For demonstration purposes, we'll just simulate an API call with a timeout.\r\n        const response = await new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            // This is where you would resolve with an actual response from an API.\r\n            resolve({ success: true });\r\n          }, 1000);\r\n        });\r\n\r\n        if (response.success) {\r\n          // Redirect to the main page\r\n          this.$router.push({ name: 'MainPage' });\r\n        } else {\r\n          // Handle login failure (e.g., wrong credentials)\r\n          console.error('Login failed: Invalid credentials');\r\n          // Here you should set an error message in your data to be displayed to the user.\r\n        }\r\n      } catch (error) {\r\n        // Handle errors (e.g., network error, server error)\r\n        console.error('Login error:', error);\r\n        // Set an error message in your data to be displayed to the user.\r\n      }\r\n    }\r\n  }\r\n  */\r\n}\r\n</script>\r\n\r\n\r\n<style>\r\ndiv {\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 300px;\r\n  margin: 50px auto;\r\n  padding: 20px;\r\n  border: none;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 0px;\r\n  margin: 10px 0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 3px;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #333;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n    align:center;\r\n  background-color: #444;\r\n}\r\n</style>\r\n"],"mappings":";AAYA,eAAe;EACbA,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,KAAKA,CAAA,EAAG;MACNC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACL,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;MACnD;MACA,IAAI,IAAI,CAACD,QAAO,IAAK,IAAI,CAACC,QAAQ,EAAE;QAClC;QACA,IAAI,CAACK,OAAO,CAACC,IAAI,CAAC;UAAET,IAAI,EAAE;QAAW,CAAC,CAAC;MACzC;IACF;EACF;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA"},"metadata":{},"sourceType":"module","externalDependencies":[]}